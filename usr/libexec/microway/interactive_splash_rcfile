################################################################################
#################################### Microway Cluster Management Software (MCMS)
################################################################################
#
# This tool takes inspiration and code from several projects:
#
#   SLURM interactive script - Copyright (C) 2013 Alan Orth
#   https://github.com/alanorth/hpc_infrastructure_scripts/
#
#   sinteractive
#     * originally written by PÃ¤r Andersson (National Supercomputer Centre,
#       Sweden) and published in the SLURM FAQ.
#     * Small changes by Paul Mezzanini - Rochester Institute of Technology
#     * Major changes by Josh McSavaney - Rochester Institute of Technology
#
#
# Modified scripts (with bugfixes and additional feature support):
#   Copyright (C) 2015-2016 Microway, Inc. All rights reserved.
#   http://www.microway.com
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################


tput setaf 2
echo "Welcome to your compute node! (${HOSTNAME})"
tput sgr0

cat <<EOF

This interactive session is really just a login with the GNU screen utility.

You'll find multiple "tabs" open at the bottom of your terminal window. These
tabs, or regions, all exist within a single encompassing screen "session." The
first tab lets you monitor the real-time utilization of this system. The second
is a standard Linux shell session (where you should do your work). Additional
tabs may be easily created - see the keyboard shortcuts below.

Please close this session when you're done or the scheduler will kill it. You
can see the amount of time remaining at the bottom-right of the window.


Here are some useful screen commands:

  Key combination   Result
  ----------------------------------------------------------------------------
  Ctrl+a c          Create a new tab (with bash shell)

  Ctrl+a n          Switch to the next tab
  Ctrl+a p          Switch to the previous tab

  Ctrl+a d          Detach from the session (without killing any running jobs)

  (For example, hold down CTRL and tap 'a'. Then release both and press 'n')


EOF



tput setaf 2
echo "Below are some details on the hardware specifications of this node:"
tput sgr0
echo



NUM_SOCKETS=$((`grep 'physical id' /proc/cpuinfo | sort -u | tail -n1 | cut -d" " -f3` + 1))
NUM_CORES=$(grep siblings /proc/cpuinfo | head -n1 | cut -d" " -f2)
MEM_TOTAL=$(awk '/MemTotal:/ {print $2/(1024*1024)}' /proc/meminfo)
MEM_FREE=$(awk '/MemAvailable:|^MemFree:|^Buffers:|^Cached:/ {if ($1 == "MemAvailable:") {sum=$2; exit;} else {sum+=$2}} END {print sum/(1024*1024)}' /proc/meminfo)

echo "$NUM_SOCKETS CPU sockets with $NUM_CORES cores each ($(grep -m1 'model name' /proc/cpuinfo))"
echo "System memory: $MEM_FREE GB free ($MEM_TOTAL GB total)"
echo

# Check for GPUs
if [[ -n "$CUDA_VISIBLE_DEVICES" && "$CUDA_VISIBLE_DEVICES" != "NoDevFiles" ]]; then
    echo NVIDIA CUDA device IDs in use: $CUDA_VISIBLE_DEVICES
    echo
fi

# Check for Xeon Phi Coprocessors
if [[ -n "$OFFLOAD_DEVICES" ]]; then
    echo Xeon Phi device IDs in use: $OFFLOAD_DEVICES
    echo
fi


