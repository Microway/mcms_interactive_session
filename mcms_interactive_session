#!/bin/bash

#
# Original script:
#   Copyright (C) 2013 Alan Orth
#   https://github.com/alanorth/hpc_infrastructure_scripts/
#
# Modified script (with bugfixes and additional feature support):
#   Copyright (C) 2015 Microway, Inc. All rights reserved.
#   http://www.microway.com
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#
# interactive: Obtain interactive shell with slurm allocation
#
# Basically simulates:
#
#    salloc -n1 srun --x11 --pty bash
#


# Default job parameters
DEF_NUM_CPUS=1
DEF_PARTITION=interactive
DEF_JOB_NAME=${USER}-interactive


################################################################################

PROGNAME=$(basename $0)
ARGS="$@"


function help() {
    # List available generic resources in SLURM
    GRES=$(srun --gres=help | awk '!/Valid gres/ {print "\t\t",$0}' | sort -u)

    # List available node features in SLURM
    FEATURES=$(sinfo --format="%f" | awk '!/FEATURES/ {gsub(",", "\n\t\t "); print "\t\t",$0}' | sort -u)

    cat <<-EOF

    Obtain an interactive shell on a compute node (via SLURM).

    Usage: $PROGNAME [-c] [-m] [-g] [-f] [-p] [-J] [-r] [-s] [-t] [-w]

    Optional arguments:
        -c: number of CPU cores to request (default: $DEF_NUM_CPUS)
        -m: number of megabytes of memory to request
        -g: type and number of generic resources - available options:
    ${GRES:-            none}

        -f: desired node features (combine features with the | or & operators)
            Available options:
    ${FEATURES:-            none}

        -p: partition to run job in (default: $DEF_PARTITION)
        -J: job name (default: $DEF_JOB_NAME)
        -r: allocate resources from the named reservation
        -s: share node with other users (default: yes)
        -t: job length (use SLURM time formats)
        -w: request a specific node (by name)


    Original script written by: Alan Orth <a.orth@cgiar.org>
    Additional features and bugfixes by: Microway, Inc. http://www.microway.com/

EOF

    exit 0
}


function parse_options() {
    while getopts ":c:m:g:f:p:J:r:s:t:w:" opt; do
        case $opt in
            c)
                # make sure -c is passed a valid integer
                if ! [[ "$OPTARG" =~ ^[0-9]+$ ]]; then
                    echo -e "\nRequested CPU cores must be an integer!\n\n"

                    help
                fi

                NUM_CPUS=$OPTARG
                ;;
            m)
                # make sure -m is passed a valid integer
                if ! [[ "$OPTARG" =~ ^[0-9]+$ ]]; then
                    echo -e "\nMemory capacity request must be an integer!\n\n"

                    help
                fi

                NUM_MEMORY=$OPTARG
                ;;
            g)
                GRES=$OPTARG
                ;;
            f)
                FEATURES=$OPTARG
                ;;
            p)
                PARTITION=$OPTARG
                ;;
            J)
                JOB_NAME=$OPTARG
                ;;
            r)
                RESERVATION=$OPTARG
                ;;
            s)
                # make sure -s is passed a valid boolean
                OPTARG=${OPTARG:0:1}
                if [[ "$OPTARG" == "0" ]] || [[ "${OPTARG^^}" == "N" ]]; then
                    SHARE_NODE=0
                elif [[ "$OPTARG" == "1" ]] || [[ "${OPTARG^^}" == "Y" ]]; then
                    SHARE_NODE=1
                else
                    help
                fi
                ;;
            t)
                JOB_TIME=$OPTARG
                ;;
            w)
                NODE_NAME=$OPTARG
                ;;
            \?|:)
                help
                ;;
        esac
    done
}


function envsetup() {
    INTERACTIVE_SHELL=/bin/bash
    INTERACTIVE_SHELL_OPTS="-i -l"

    # request default CPU count, unless more are requested
    SALLOC_OPTS="--cpus-per-task=${NUM_CPUS:-$DEF_NUM_CPUS}"

    # check for memory quantity required (if any)
    if [[ -n "$NUM_MEMORY" ]]; then
        SALLOC_OPTS="$SALLOC_OPTS --mem=$NUM_MEMORY"
    fi

    # check for generic resource requirements (if any)
    if [[ -n "$GRES" ]]; then
        SALLOC_OPTS="$SALLOC_OPTS --gres=$GRES"
    fi

    # check for required features (if any)
    if [[ -n "$FEATURES" ]]; then
        SALLOC_OPTS="$SALLOC_OPTS --constraint=$FEATURES"
    fi

    # see if the user specified a partition, otherwise use default
    SALLOC_OPTS="$SALLOC_OPTS --partition=${PARTITION:-$DEF_PARTITION}"

    # check for a job name, otherwise use default
    SALLOC_OPTS="$SALLOC_OPTS --job-name=${JOB_NAME:-$DEF_JOB_NAME}"

    # check for a specific SLURM reservation
    if [[ -n "$RESERVATION" ]]; then
        SALLOC_OPTS="$SALLOC_OPTS --reservation=$RESERVATION"
    fi

    # set the job to shared or exclusive mode
    if [[ -n "$SHARE_NODE" ]] && [[ "$SHARE_NODE" -eq 0 ]]; then
        SALLOC_OPTS="$SALLOC_OPTS --exclusive"
    else
        SALLOC_OPTS="$SALLOC_OPTS --share"
    fi

    # check for job's time requirements
    if [[ -n "$JOB_TIME" ]]; then
        SALLOC_OPTS="$SALLOC_OPTS --time=$JOB_TIME"
    fi

    # if user specifies a node name, run all the tasks in the specified node
    if [[ -n "$NODE_NAME" ]]; then
        SALLOC_OPTS="$SALLOC_OPTS --nodelist=$NODE_NAME"
    fi

    # check if we want X11
    if [[ -n "$DISPLAY" ]]; then
        SRUN_OPTS="--x11 --pty"
    else
        SRUN_OPTS="--pty"
    fi
}


# pass the shell's argument array to the parsing function
parse_options $ARGS

# setup the defaults
envsetup


# We may have a pause here if SLURM is getting nodes ready (either by powering
# up nodes that are powered off and/or running long health checks).
echo
echo "Obtaining your interactive shell session..."
echo
echo "Please be patient - if the compute nodes are in power-saving mode,"
echo "it may take 2-3 minutes to start your session..."
echo

salloc $SALLOC_OPTS srun $SRUN_OPTS $INTERACTIVE_SHELL $INTERACTIVE_SHELL_OPTS

